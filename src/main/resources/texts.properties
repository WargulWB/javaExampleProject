# TEXT ENCODING: ISO-8859-1 [DO NOT CHANGE THE ENCODING]
title= Java Examples Project

#main frame related
mainFrame.arguments=Arguments:
mainFrame.run=Run
mainFrame.overview=Overview
mainFrame.output=Output
mainFrame.description=Description
mainFrame.relevantPackages=Relevant Packages:
mainFrame.relevantClasses=Relevant Classes:
mainFrame.descriptionLabel=Description:
mainFrame.code=Code

#example types
exampleType.general=General
exampleType.io=Input/Output (IO)
exampleType.patterns=Patterns
exampleType.optimizationAlgorithms=Optimization Algorithms

#source code presentation
sourceCode.defaultErrorMsg=Either there is no 'source'-folder existent or there is no source file for this class present in that folder.
sourceCode.unselectedMsg=No class was selected.
sourceCode.IOErrorMsg=An error occurred while attempting to read a source-file. \
 \nThis might be caused by manual changes or changes by other programs to the source files or there directories.

#examples
example.log.noArgumentsRequired=This example requires no arguments.
example.builderPattern=Builder Pattern
example.builderPattern.description=The idea behind this implementation is to add an internal Builder-class to a class (likely to be a model class) \
 which can be used to construct a new instance of the class rather than using a class constructor. The benefit of this is, classes which have a \
 large set of parameters would have a large/unreadable constructor, the builder allows the settings per set-Methods which is much easier to read and to use. \
 On top of this the builder can handle any validation of parameters and can provide default value handling.\n\n\
 In this example the %1$s constructs/tries to construct multiple instances of %2$s by using %3$s. Note that the private constructors force the usage of the \
 builder and deny the possibility to use the constructors instead.
example.correctiveProcedure=Corrective Procedures (Takes some time to compute, blocks application.)
example.correctiveProcedure.description=TODO
example.geneticAlgorithm=Genetic Algorihms (Takes some time to compute, blocks application.)
example.geneticAlgorithm.description=TODO
example.factoryPattern=Factory Pattern
example.lambdaExpression=Lambda Expression
example.lambdaExpression.description=In this example the usage of functional interfaces and lambda expressions is explained. No arguments are required.
example.listenerPattern=Listener Pattern
example.listenerPattern.description=In this example the listener pattern is displayed. The example class %s implements the %s-interface and is added as listener \
 to %s. This allows the example class to perform its #update(...)-method as reaction of the model changes.
example.matrix=Matrix
example.matrix.description=This example is likely to only be useful for myself. I am never able to remember how a matrix is build up and which index corresponds to which dimension. \
Therefore this example shows how this can be done. However this matrix-implementation is by no means designed to be optimal.
example.streamApi=Stream API
example.streamApi.description=In this example some stream API uses are shown of. \
 The stream API is a new way of chaining multiple operations over collections. \
 Which allows complex collection operations in relative short and easy to read code. \
 For this purpose a private class '%s' is defined inside the example class is defined and used. No arguments are required.
example.stringFormat=Formatted String
example.stringFormat.description=In this example multiple lines of string will be logged which are formatted via String#format(String,Objects...). No arguments are required.
example.optional=Optional
example.optional.description=In this example we will look at the usage of %s to avoid %ss.
example.singletonPattern=Singleton Pattern
example.preferences=Preferences
example.preferences.description=In this example we will look at how to store parameters like settings, usernames, etc. permanently using the Preferences-class which uses OS-dependent \
 methods for storing. For example on Windows the preferences are written to the registry.
example.writeAndReadTextFilesPostJava7=Read And Write Text Files (After Java 7)
example.writeAndReadTextFilesPostJava7.description=This example requires one argument - the path to a file. This file may or may not exist. \
 The example should work anyways. Do note that certain locations, like 'C:' on a windows system, may not be writable.\n\n\
 The example ensures that the files is not written in default system encoding but in UTF-8 encoding.\n\n\
 The program will attempt to write the following text %s %d-times to the given file in overwrite mode (overwriting the content the given file may contain). \
 It will than write the same text %d-times to the file in append mode (appending the given file). Afterwards the program is going to read the written lines back in \
 and log those lines to show, that the writing and reading was successful.
example.writeAndReadTextFilesPreJava7=Read And Write Text Files (Before Java 7)
example.writeAndReadTextFilesPreJava7.description=This example requires one argument - the path to a file. This file may or may not exist. \
 The example should work anyways. Do note that certain locations, like 'C:' on a windows system, may not be writable.\n\n\
 The example ensures that the files is not written in default system encoding but in UTF-8 encoding.\n\n\
 The program will attempt to write the following text %s %d-times to the given file in overwrite mode (overwriting the content the given file may contain). \
 It will than write the same text %d-times to the file in append mode (appending the given file). Afterwards the program is going to read the written lines back in \
 and log those lines to show, that the writing and reading was successful.
example.xmlIo=Extensible Markup Language (XML) Input/Output
example.xmlIo.description=This example shows how to write a 'complex' java object to a file using xml-encoding and how to read it back in using \
 Java Architecture for XML Binding (JAXB) and an XML Schema Definition (XSD) file.
 